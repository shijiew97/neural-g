theta <- rbeta(n, 3, 2);Y = rlnorm(n, theta, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
### Gaussian Location Mixture model example
Seed <- 128783;dist <- "LogGaussian";param <- 0.2
n <- 2000;L <- 5;num_it <- 4000;n_grid <- 100
theta <- rbeta(n, 3, 2);Y = rlnorm(n, theta, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
library(NetNPMLE)
### Gaussian Location Mixture model example
Seed <- 128783;dist <- "LogGaussian";param <- 0.2
n <- 2000;L <- 5;num_it <- 4000;n_grid <- 100
theta <- rbeta(n, 3, 2);Y = rlnorm(n, theta, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
library(NetNPMLE)
### Gaussian Location Mixture model example
Seed <- 128783;dist <- "LogGaussian";param <- 0.2
n <- 2000;L <- 5;num_it <- 4000;n_grid <- 100
theta <- rbeta(n, 3, 2);Y = rlnorm(n, theta, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
net_npmle
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5))
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l')
xlab='support', ylab='mass', lwd=3)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l',
xlab='support', ylab='mass', lwd=3)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0, 0.5))
Seed <- 128783;dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 4000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
Seed <- 128783;dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 8000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
Seed <- 128783;dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 6000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
Seed <- 128783;dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 8000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.5), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=1.0)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2),
bty="n", cex=2.5)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=0.5)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2),
bty="n", cex=2.5)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
Seed <- 128783;dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 6000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=0.5)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2),
bty="n", cex=2.5)
Seed <- 128783;set.seed(Seed);dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 6000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
Seed <- 128783;set.seed(Seed);dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 8000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=0.5)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2), bty="n", cex=1.0, x.intersp=0.8, y.intersp=0.8)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=1.0)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2), bty="n", cex=1.0, x.intersp=0.8, y.intersp=0.8)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=0.5)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2), bty="n", cex=1.0, x.intersp=0.8, y.intersp=0.8)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=0.5)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2), bty="n", cex=1.0, x.intersp=0.8, y.intersp=0.8)
Seed <- 128783;set.seed(Seed);dist <- "Gaussian";param <- 1.0
n <- 2000;L <- 5;num_it <- 4000;n_grid <- 100
theta <- runif(n, -2, 2);Y = theta + rnorm(n, 0, param)
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85)
efnpmle = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=5, c0=1.0)
efnpmle20 = deconvolveR::deconv(tau=net_npmle$support, X=Y, deltaAt=0, family="Normal", pDegree=20, c0=0.5)
lines(net_npmle$support, efnpmle$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0.5,0.5), lty=1, lwd=2)
lines(net_npmle$support, efnpmle20$stats[,"g"], type="l", xlab="", ylab="", col=rgb(0,0,1), lty=1, lwd=2)
legend("topright", c("Net-NPMLE","Efron(5)","Efron(20)"),
col=c(rgb(1,0,0),rgb(0,0.5,0.5),rgb(0,0,1)), lty=c(1,1,1),
lwd=c(3,2,2,2,2), bty="n", cex=1.0, x.intersp=0.8, y.intersp=0.8)
plot(net_npmle$support, net_npmle$prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.2), cex.axis=1.85, cex.lab=1.85)
library(NetNPMLE)
rm(list=ls())
workpc = 1
if(workpc == 1){setwd("C:/Users/18036/Dropbox/Shijie/WBB")}
if(workpc == 2){setwd("E:/Dropbox/Shijie/WBB")}
if(workpc == 3){setwd("~/Dropbox/Shijie/WBB")}
#setwd("C:/Users/18036/Dropbox/Shijie/WBB/relu")
#setwd("~/Dropbox/Shijie/WBB")
####--NPMLE--mixture-setting--example--####
#model_type = "Gaussian_Location"
#model_type = "Gaussian_LocationV2"
#model_type = "Poisson_Gamma" #iter-4000
#model_type = "Poisson_Mixture" #iter-4000
#model_type = "Gaussian_Gaussian"
#model_type = "Gaussian_Gaussian_mixture"
#model_type = "Gaussian_Gaussian_mixture2"
#model_type = "Gaussian_Unif"
#model_type = "Gaussian_triangle"
#model_type = "Gaussian_discont"
#model_type = "Gaussian_discont2"
#model_type = "Binomial"
#model_type = "LogGaussian" #iter-4000
#model_type = "Cauchy"
#model_type = "Gumbel" #iter-4000
#model_type = "Gumbel_smooth"
#model_type = "Gaussian_scale"
model_type = "Gaussian2"
#model_type = "Gaussian2smooth"
#model_type = "student3"
param = 0.5
if(model_type == "Poisson_Gamma"){dist = "Possion"}
if(model_type == "Poisson_Mixture"){dist = "Possion"}
if(model_type == "Gaussian_Location"){dist = "Gaussian";param=0.5}
if(model_type == "Gaussian_LocationV2"){dist = "Gaussian";param=0.5}
if(model_type == "Gaussian_Gaussian"){dist = "Gaussian";param=1.0}
if(model_type == "Gaussian_Unif"){dist = "Gaussian";param=1.0}
if(model_type == "Gaussian_triangle"){dist = "Gaussian";param=1.0}
if(model_type == "Gaussian_discont"){dist = "Gaussian";param=1.0}
if(model_type == "Gaussian_discont2"){dist = "Gaussian";param=0.4}
if(model_type == "Gaussian_Gaussian_mixture"){dist = "Gaussian";param=1.0}
if(model_type == "Gaussian_Gaussian_mixture2"){dist = "Gaussian";param=1.0}
if(model_type == "Binomial"){dist = "Binomial";param=10.0}
if(model_type == "LogGaussian"){dist = "LogGaussian";param=0.2}
if(model_type == "Cauchy"){dist = "Cauchy";param=0.1}
if(model_type == "Gumbel"){dist = "Gumbel";param=0.5}
if(model_type == "Gumbel_smooth"){dist = "Gumbel";param=1.0}
if(model_type == "Gaussian_scale"){dist = "Gaussian_scale";param=0.0}
####Paramter Setting####
gpu_ind = 0
verb = 1
Seed = 128783
#Dataset
n = 4000#*2
n0 = n
p = 1
n_grid = 100
##Neural Network
L = 5#5
num_it = 8000#8000#
hidden_size = 500#500
lr = 0.0001
lr_power = 0.2
lrdecay = 1
lam_min = -8.0
lam_max = 1.5
pen_on = 0
boot = 0
bivar = 0
J = 2
if(boot == 1){num_it = 4000;L=3;n=4000;n0=n}
if(model_type == "Gaussian2"){
dist = "Gaussian2";param=0.5
n_grid = 50;J = 2;num_it=4000;n=1000;n0=n}
if(model_type == "Gaussian2smooth"){
dist = "Gaussian2s";param=0.5
n_grid = 50;J = 2;num_it=4000;n=1000;n0=n}
if(model_type == "student3"){
dist = "student3";param=0.5
n_grid = 25;J = 3;num_it=4000;n=1000;n0=n
}
#if(model_type == "LogGaussian"){num_it=4000}
####Data Gen and Model fit####
if(workpc == 3){
source("~/Dropbox/Shijie/WBB/R_Code/NP_Data_Gen.R")
source("~/Dropbox/Shijie/WBB/R_Code/NP_Model_Fit.R")
}else{
source("./R_code/NP_Data_Gen.R")
source("./R_code/NP_Model_Fit.R")
}
X
dim(X)
dim(Y)
apply(y, mean, 1)
apply(y, mean)
?apply
apply(y, 1, mean)
a = apply(y, 1, mean)
min(a)
max(a)
(a-mean(y))^2
(a-mean(y))^2+apply((y-a)^2 ,1, mean)
b = (a-mean(y))^2+apply((y-a)^2 ,1, mean)
min(b)
max(b)
sqrt(max(b))
min(ab)
min(a)
library(NetNPMLE)
### Gasussian discrete
Seed <- 128783;set.seed(Seed);dist <- "Gaussian2";param <- 0.5
n <- 4000;L <- 5;num_it <- 4000;n_grid <- 50;p <- 2
theta<-c(0, 2);mix_prob<-c(0.2, 0.8);theta1<-rep(0,n);theta2<-rep(0,n)
Y = matrix(0, n, p)
for(i in 1:n){
mu = base::sample(theta, size=1, prob=mix_prob)
sigma = 1*(mu==0)+0.1*(mu==2)
Y[i,] = mu+sigma*rnorm(p)
theta1[i] = mu;theta2[i] = sigma
}
net_npmle <- Net_NPMLE(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid, p=p)
reticulate::py_last_error()
### Gasussian discrete
Seed <- 128783;set.seed(Seed);dist <- "Gaussian2";param <- 0.5
n <- 1000;L <- 5;num_it <- 4000;n_grid <- 50;p <- 2
theta<-c(0, 2);mix_prob<-c(0.2, 0.8);theta1<-rep(0,n);theta2<-rep(0,n)
Y = matrix(0, n, p)
for(i in 1:n){
mu = base::sample(theta, size=1, prob=mix_prob)
sigma = 1*(mu==0)+0.1*(mu==2)
Y[i,] = mu+sigma*rnorm(p)
theta1[i] = mu;theta2[i] = sigma
}
net_npmle <- Net_NPMLE2(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid, p=p)
mu_support <- unique(net_npmle$support[,1])
net_npmle$support
library(NetNPMLE)
### Gasussian discrete
Seed <- 128783;set.seed(Seed);dist <- "Gaussian2";param <- 0.5
n <- 1000;L <- 5;num_it <- 4;n_grid <- 50;p <- 2
theta<-c(0, 2);mix_prob<-c(0.2, 0.8);theta1<-rep(0,n);theta2<-rep(0,n)
Y = matrix(0, n, p)
for(i in 1:n){
mu = base::sample(theta, size=1, prob=mix_prob)
sigma = 1*(mu==0)+0.1*(mu==2)
Y[i,] = mu+sigma*rnorm(p)
theta1[i] = mu;theta2[i] = sigma
}
net_npmle <- Net_NPMLE2(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid, p=p)
net_npmle$support[,1]
dim(net_npmle$support[,1])
length(net_npmle$support[,1])
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu <- rep(0, n_grid);sigma <- rep(0, n_grid)
for(i in 1:n_grid){
mu[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i])] )
mu_support
net_npmle$prob[net_npmle$support[,1]==mu_support[i]]
net_npmle$prob
net_npmle$support[,1]==mu_support[i]
mu_support[i]
i
mu_support
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu <- rep(0, n_grid);sigma <- rep(0, n_grid)
for(i in 1:n_grid){
mu[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i]] )
sigma[i] <- sum( net_npmle$prob[net_npmle$support[,2]==sig_support[i]] )
}
sigma
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0, 0.5), cex.axis=1.85)
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu_prob <- rep(0, n_grid);sigma_prob <- rep(0, n_grid)
for(i in 1:n_grid){
mu_prob[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i]] )
sigma_prob[i] <- sum( net_npmle$prob[net_npmle$support[,2]==sig_support[i]] )
}
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0, 0.5), cex.axis=1.85)
Seed <- 128783;set.seed(Seed);dist <- "Gaussian2";param <- 0.5
n <- 1000;L <- 5;num_it <- 4000;n_grid <- 50;p <- 2
theta<-c(0, 2);mix_prob<-c(0.2, 0.8);theta1<-rep(0,n);theta2<-rep(0,n)
Y = matrix(0, n, p)
for(i in 1:n){
mu = base::sample(theta, size=1, prob=mix_prob)
sigma = 1*(mu==0)+0.1*(mu==2)
Y[i,] = mu+sigma*rnorm(p)
theta1[i] = mu;theta2[i] = sigma
}
net_npmle <- Net_NPMLE2(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid, p=p)
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu_prob <- rep(0, n_grid);sigma_prob <- rep(0, n_grid)
for(i in 1:n_grid){
mu_prob[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i]] )
sigma_prob[i] <- sum( net_npmle$prob[net_npmle$support[,2]==sig_support[i]] )
}
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0, 0.5), cex.axis=1.85)
lines(sig_support, sig_prob, col=rgb(0,0,1,0.8), type='l')
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu_prob <- rep(0, n_grid);sigma_prob <- rep(0, n_grid)
for(i in 1:n_grid){
mu_prob[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i]] )
sigma_prob[i] <- sum( net_npmle$prob[net_npmle$support[,2]==sig_support[i]] )
}
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l',
xlab='support', ylab='mass', lwd=3, ylim=c(0, 0.5), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l')
legend("topright", c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,1), lwd=c(3,3),
bty="n", x.intersp=1.0, y.intersp=1.0, seg.len=2.0, cex=1.0)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l')
legend("topright", c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,1), lwd=c(3,3),
bty="n", x.intersp=1.0, y.intersp=1.0, seg.len=2.0, cex=1.0)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3)
legend("topright", c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,1), lwd=c(3,3),
bty="n", x.intersp=1.0, y.intersp=1.0, seg.len=2.0, cex=1.0)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend("topright", c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,1), lwd=c(3,3),
bty="n", x.intersp=1.0, y.intersp=1.0, seg.len=2.0, cex=1.0)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.8, y=1.0, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=1.0, y.intersp=1.0, seg.len=2.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.2, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=1.0, y.intersp=1.0, seg.len=2.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.2, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=0.8, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.4, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
install.packages("MCMCpack")
### Gasussian smooth
Seed <- 128783;set.seed(Seed);dist <- "Gaussian2s";param <- 0.5
n <- 1000;L <- 5;num_it <- 4000;n_grid <- 50;p <- 2
mu <- 1;sigma <- 1; shape <- 2;scale <- 0.5
Y <- matrix(0, n, p)
theta1 <- MCMCpack::rinvgamma(n, shape, scale)
theta2 <- rnorm(n, mu, sd = sqrt(theta1 * sigma^2))
for(i in 1:n){Y[i,] <- theta2[i]+theta1[i]*rnorm(p)}
net_npmle <- Net_NPMLE2(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid, p=p)
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu_prob <- rep(0, n_grid);sigma_prob <- rep(0, n_grid)
for(i in 1:n_grid){
mu_prob[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i]] )
sigma_prob[i] <- sum( net_npmle$prob[net_npmle$support[,2]==sig_support[i]] )
}
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
Mu <- apply(Y, 1, mean)
Sigma <- (Mu-mean(Y))^2 + apply((Y-Mu)^2 ,1, mean)
mu1 <- min(Mu);mu2 <- max(Mu)
sigma1 <- sqrt(min(Sigma));sigma2 <- sqrt(max(Sigma))
mu1
mu2
sigma1
sigma2
Mu
max(Mu)
sqrt(max(Sigma))
apply(Y, 1, mean)
Sigma
roxygen2::roxygenise()
library(NetNPMLE)
roxygen2::roxygenise()
rlang::last_trace()
roxygen2::roxygenise()
library(NetNPMLE)
### Gasussian smooth
Seed <- 128783;set.seed(Seed);dist <- "Gaussian2s";param <- 0.5
n <- 1000;L <- 5;num_it <- 4000;n_grid <- 50;p <- 2
mu <- 1;sigma <- 1; shape <- 2;scale <- 0.5
Y <- matrix(0, n, p)
theta1 <- MCMCpack::rinvgamma(n, shape, scale)
theta2 <- rnorm(n, mu, sd = sqrt(theta1 * sigma^2))
for(i in 1:n){Y[i,] <- theta2[i]+theta1[i]*rnorm(p)}
net_npmle <- Net_NPMLE2(Y=Y, param=param, dist=dist, n=n, num_it=num_it, n_grid=n_grid, p=p)
mu_support <- unique(net_npmle$support[,1])
sig_support <- unique(net_npmle$support[,2])
mu_prob <- rep(0, n_grid);sigma_prob <- rep(0, n_grid)
for(i in 1:n_grid){
mu_prob[i] <- sum( net_npmle$prob[net_npmle$support[,1]==mu_support[i]] )
sigma_prob[i] <- sum( net_npmle$prob[net_npmle$support[,2]==sig_support[i]] )
}
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,1.2), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.25), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.35), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=1.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.35), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=0.3, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.35), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=0.4, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
plot(mu_support, mu_prob, col=rgb(1,0,0,0.8), type='l', xlim=c(-1,3),
xlab='support', ylab='mass', lwd=3, ylim=c(0,0.35), cex.axis=1.85, cex.lab=1.85)
lines(sig_support, sigma_prob, col=rgb(0,0,1,0.8), type='l', lwd=3, lty=2)
legend(x=2.0, y=0.385, c(expression(mu),expression(sigma^2)),
col=c(rgb(1,0,0),rgb(0,0,1)), lty=c(1,2), lwd=c(3,3),
bty="n", x.intersp=0.5, y.intersp=0.8, seg.len=1.0, cex=1.85)
library(NetNPMLE)
use_description()
